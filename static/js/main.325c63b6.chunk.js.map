{"version":3,"sources":["@store/reducers/index.js","@store/types/index.js","@store/index.js","@services/index.js","@store/actions/index.js","@pages/Users/index.js","@routes/index.js","@pages/Dashboard/index.js","@pages/Posts/index.js","@pages/Comments/index.js","@pages/Albums/index.js","@pages/Photos/index.js","App.js","serviceWorker.js","index.js"],"names":["reducers","combineReducers","getUserListReducer","state","action","type","payload","getPostsReducer","deletePostReducer","getCommentsReducer","getAlbumsReducer","getPhotosReducer","middleware","applyMiddleware","thunk","store","createStore","compose","root","getPostsService","id","axios","get","getCommentsService","deletePostService","delete","getAlbumsService","getPhotosService","deletePostAction","dispatch","a","console","log","res","error","data","connect","userList","getUserListAction","props","fetchData","useCallback","useEffect","gutter","length","map","val","idx","span","key","actions","to","name","username","email","href","website","phone","routes","path","component","Users","postList","getPostsAction","idUser","match","params","title","onClick","body","commentList","getCommentsAction","idPost","extra","albumList","getAlbumsAction","photoList","getPhotosAction","Content","Layout","withRouter","className","route","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.325c63b6.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nimport {\n  GET_USERS,\n  GET_POSTS,\n  DELETE_POST,\n  GET_COMMENTS,\n  GET_ALBUMS,\n  GET_PHOTOS\n} from './../types';\n\nconst getUserListReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_USERS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst getPostsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst deletePostReducer = (state = {}, action) => {\n  switch (action.type) {\n    case DELETE_POST:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst getCommentsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_COMMENTS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst getAlbumsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_ALBUMS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst getPhotosReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_PHOTOS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  getUserListReducer,\n  getPostsReducer,\n  deletePostReducer,\n  getCommentsReducer,\n  getAlbumsReducer,\n  getPhotosReducer\n});\n\nexport default reducers;\n","export const GET_USERS = 'GET_USERS';\nexport const GET_POSTS = 'GET_POSTS';\nexport const DELETE_POST = 'DELETE_POST';\nexport const GET_COMMENTS = 'GET_COMMENTS';\nexport const GET_ALBUMS = 'GET_ALBUMS';\nexport const GET_PHOTOS = 'GET_PHOTOS';\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../@store/reducers';\n\nconst rootReducer = (state, action) => {\n  return reducers(state, action);\n};\n\nconst middleware = applyMiddleware(thunk);\n\nconst store = createStore(rootReducer, compose(middleware));\n\nexport { store };\n","import axios from 'axios';\n\nconst root = 'https://jsonplaceholder.typicode.com';\n\nexport const getUserListService = () => {\n  return axios.get(`${root}/users`);\n};\n\nexport const getPostsService = id => {\n  return axios.get(`${root}/users/${id}/posts`);\n};\n\nexport const getCommentsService = id => {\n  return axios.get(`${root}/posts/${id}/comments`);\n};\n\nexport const deletePostService = id => {\n  return axios.delete(`${root}/posts/${id}`);\n};\n\nexport const getAlbumsService = id => {\n  return axios.get(`${root}/users/${id}/albums`);\n};\n\nexport const getPhotosService = id => {\n  return axios.get(`${root}/albums/${id}/photos`);\n};\n","import {\n  GET_USERS,\n  GET_POSTS,\n  DELETE_POST,\n  GET_COMMENTS,\n  GET_ALBUMS,\n  GET_PHOTOS\n} from './../types';\nimport {\n  getUserListService,\n  getPostsService,\n  deletePostService,\n  getCommentsService,\n  getAlbumsService,\n  getPhotosService\n} from '../../@services';\n\nexport const getUserListAction = () => async dispatch => {\n  let res;\n  try {\n    res = await getUserListService();\n  } catch (error) {\n    console.error(error);\n  }\n\n  if (res) {\n    dispatch({\n      type: GET_USERS,\n      payload: res.data\n    });\n  }\n};\n\nexport const getPostsAction = id => async dispatch => {\n  let res;\n  try {\n    res = await getPostsService(id);\n  } catch (error) {\n    console.error(error);\n  }\n\n  if (res) {\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  }\n};\n\nexport const deletePostAction = id => async dispatch => {\n  console.log({ id });\n  let res;\n  try {\n    res = await deletePostService(id);\n    console.log({ res });\n  } catch (error) {\n    console.error(error);\n  }\n\n  if (res) {\n    dispatch({\n      type: DELETE_POST,\n      payload: res.data\n    });\n  }\n};\n\nexport const getCommentsAction = id => async dispatch => {\n  let res;\n  try {\n    res = await getCommentsService(id);\n    console.log({ res });\n  } catch (error) {\n    console.error(error);\n  }\n\n  if (res) {\n    dispatch({\n      type: GET_COMMENTS,\n      payload: res.data\n    });\n  }\n};\n\nexport const getAlbumsAction = id => async dispatch => {\n  let res;\n  try {\n    res = await getAlbumsService(id);\n  } catch (error) {\n    console.error(error);\n  }\n\n  if (res) {\n    dispatch({\n      type: GET_ALBUMS,\n      payload: res.data\n    });\n  }\n};\n\nexport const getPhotosAction = id => async dispatch => {\n  let res;\n  try {\n    res = await getPhotosService(id);\n  } catch (error) {\n    console.error(error);\n  }\n\n  if (res) {\n    dispatch({\n      type: GET_PHOTOS,\n      payload: res.data\n    });\n  }\n};\n","import React, { useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Icon } from 'antd';\nimport { getUserListAction } from '../../@store/actions';\n\nconst UserList = props => {\n  const { userList, getUserListAction } = props;\n\n  const fetchData = useCallback(() => {\n    getUserListAction();\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>\n      <Row gutter={[16, 16]}>\n        {!!userList.length &&\n          userList.map((val, idx) => (\n            <Col span={12} key={val.id}>\n              <Card\n                actions={[\n                  <Link to={`/${val.id}/posts`}>\n                    <Icon key=\"read\" type=\"read\" />\n                  </Link>,\n                  <Link to={`/${val.id}/albums`}>\n                    <Icon key=\"picture\" type=\"picture\" />\n                  </Link>\n                ]}\n              >\n                <p>\n                  {val.name} | <b>{val.username}</b>\n                </p>\n                <p>\n                  {val.email} | <a href={val.website}>{val.website}</a>\n                </p>\n                <p>{val.phone}</p>\n              </Card>\n            </Col>\n          ))}\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    userList: state.getUserListReducer\n  };\n};\n\nexport default connect(mapStateToProps, { getUserListAction })(UserList);\n","import Dashboard from './../@pages/Dashboard';\nimport Posts from './../@pages/Posts';\nimport Comments from './../@pages/Comments';\nimport Albums from './../@pages/Albums';\nimport Photos from './../@pages/Photos';\n\nconst routes = [\n  { path: '/', component: Dashboard },\n  { path: '/:id/posts', component: Posts },\n  { path: '/:id/comments', component: Comments },\n  { path: '/:id/albums', component: Albums },\n  { path: '/:id/photos', component: Photos }\n];\n\nexport default routes;\n","import React from 'react';\nimport Users from './../Users';\n\nconst Dashboard = () => {\n  return <Users />;\n};\n\nexport default Dashboard;\n","import React, { useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Icon } from 'antd';\nimport { getPostsAction, deletePostAction } from '../../@store/actions';\n\nconst Posts = props => {\n  const {\n    postList,\n    getPostsAction,\n    match: { params }\n  } = props;\n\n  const idUser = params.id;\n\n  const fetchData = useCallback(() => {\n    getPostsAction(idUser);\n  }, []);\n\n  const deletePost = id => {\n    deletePostAction(id);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>\n      <Row gutter={[16, 16]}>\n        {!!postList.length &&\n          postList.map((val, idx) => (\n            <Col span={24} key={val.id}>\n              <Card\n                title={val.title}\n                actions={[\n                  <Link to={`/${val.id}/comments`}>\n                    <Icon key=\"message\" type=\"message\" />\n                  </Link>,\n                  <Link to={`/${val.id}/albums`}>\n                    <Icon key=\"edit\" type=\"edit\" />\n                  </Link>,\n                  <div onClick={() => deletePostAction(val.id)}>\n                    <Icon key=\"delete\" type=\"delete\" />\n                  </div>\n                ]}\n              >\n                <p>{val.body}</p>\n              </Card>\n            </Col>\n          ))}\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    postList: state.getPostsReducer\n  };\n};\n\nexport default connect(mapStateToProps, { getPostsAction, deletePostAction })(\n  Posts\n);\n","import React, { useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Icon } from 'antd';\nimport { getCommentsAction } from '../../@store/actions';\n\nconst Comments = props => {\n  const {\n    commentList,\n    getCommentsAction,\n    match: { params }\n  } = props;\n\n  const idPost = params.id;\n\n  const fetchData = useCallback(() => {\n    getCommentsAction(idPost);\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>\n      <Row gutter={[16, 16]}>\n        {!!commentList.length &&\n          commentList.map((val, idx) => (\n            <Col span={12} key={val.id}>\n              <Card\n                title={val.name}\n                extra={val.email}\n                actions={[\n                  <Link to={`/${val.id}/comments`}>\n                    <Icon key=\"picture\" type=\"picture\" />\n                  </Link>\n                ]}\n              >\n                <p>{val.body}</p>\n              </Card>\n            </Col>\n          ))}\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  console.log({ state });\n  return {\n    commentList: state.getCommentsReducer\n  };\n};\n\nexport default connect(mapStateToProps, { getCommentsAction })(Comments);\n","import React, { useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Icon } from 'antd';\nimport { getAlbumsAction } from '../../@store/actions';\n\nconst Albums = props => {\n  const {\n    albumList,\n    getAlbumsAction,\n    match: { params }\n  } = props;\n\n  const idUser = params.id;\n\n  const fetchData = useCallback(() => {\n    getAlbumsAction(idUser);\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>\n      <Row gutter={[16, 16]}>\n        {!!albumList.length &&\n          albumList.map((val, idx) => (\n            <Col span={12} key={val.id}>\n              <Card\n                actions={[\n                  <Link to={`/${val.id}/photos`}>\n                    <Icon key=\"picture\" type=\"picture\" />\n                  </Link>\n                ]}\n              >\n                <p>{val.title}</p>\n              </Card>\n            </Col>\n          ))}\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  console.log({ state });\n  return {\n    albumList: state.getAlbumsReducer\n  };\n};\n\nexport default connect(mapStateToProps, { getAlbumsAction })(Albums);\n","import React, { useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Icon } from 'antd';\nimport { getPhotosAction } from '../../@store/actions';\n\nconst Photos = props => {\n  const {\n    photoList,\n    getPhotosAction,\n    match: { params }\n  } = props;\n\n  const idUser = params.id;\n\n  const fetchData = useCallback(() => {\n    getPhotosAction(idUser);\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>\n      <Row gutter={[16, 16]}>\n        {!!photoList.length &&\n          photoList.map((val, idx) => (\n            <Col span={12} key={val.id}>\n              <Card\n                actions={[\n                  <Link to={`/${val.id}/photos`}>\n                    <Icon key=\"picture\" type=\"picture\" />\n                  </Link>\n                ]}\n              >\n                <p>{val.title}</p>\n              </Card>\n            </Col>\n          ))}\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  console.log({ state });\n  return {\n    photoList: state.getPhotosReducer\n  };\n};\n\nexport default connect(mapStateToProps, { getPhotosAction })(Photos);\n","import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Layout } from 'antd';\n\nimport Dashboard from './@pages/Dashboard/';\n\nimport routes from './@routes';\n\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst Content = Layout.Content;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Content className=\"container\">\n        <Switch>\n          {routes.map((route, idx) => (\n            <Route exact key={`${route.path} - ${idx}`} {...route} />\n          ))}\n        </Switch>\n      </Content>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './@store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}